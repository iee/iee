/*
 * generated by Xtext
 */
package org.eclipse.iee.translator.jmole.math.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import org.eclipse.iee.translator.jmole.math.math

import org.eclipse.xtext.xtend2.lib.StringConcatenation
import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*
import org.eclipse.iee.translator.jmole.math.math.*

class MathGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {

	}
	
	def String generateText(Resource resource) {
		var formulas = resource.allContentsIterable.filter(typeof(Formula));
		
		if (formulas.empty) {
			return null;
		}
		
		return formulas.head.compileFormula.toString();	
	}
	
	def compileFormula(Formula f) '''
		«compileExpression(f.expression)»;
	'''
	
	def dispatch compileExpression(Variable n) '''
		«n.name»'''
	
	def dispatch compileExpression(Number n) '''
		«n.value»'''
	
	def dispatch compileExpression(Plus op) '''
		(«compileExpression(op.left)») + («compileExpression(op.right)»)'''
		//PLUS («compileExpression(op.left)», «compileExpression(op.right)»)'''
	
	def dispatch compileExpression(Minus op) '''
		(«compileExpression(op.left)») - («compileExpression(op.right)»)'''
		//MINUS («compileExpression(op.left)», «compileExpression(op.right)»)'''
	
	def dispatch compileExpression(Mult op) '''
		(«compileExpression(op.left)») * («compileExpression(op.right)»)'''
		//MULT («compileExpression(op.left)», «compileExpression(op.right)»)'''
	
	def dispatch compileExpression(Div op) '''
		(«compileExpression(op.left)») / («compileExpression(op.right)»)'''
		//DIV («compileExpression(op.left)», «compileExpression(op.right)»)'''
	
	def dispatch compileExpression(Pow op) '''
		(«compileExpression(op.base)») ^ («compileExpression(op.power)»)'''
		//POWER («compileExpression(op.base)» «compileExpression(op.power)»)'''
}