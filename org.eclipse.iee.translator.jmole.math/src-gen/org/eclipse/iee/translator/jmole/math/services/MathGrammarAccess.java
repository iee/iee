/*
* generated by Xtext
*/

package org.eclipse.iee.translator.jmole.math.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MathGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formula");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Formula:
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Action cPlusLeftAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRightAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_0_3_0 = (RuleCall)cRightAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cMinusLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Action cMultLeftAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Keyword cAsteriskKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cPrimaryExpressionParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Action cDivLeftAction_3_1 = (Action)cGroup_3.eContents().get(1);
		private final Keyword cSolidusKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cRightAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_3_0 = (RuleCall)cRightAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cPrimaryExpressionParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Action cPowBaseAction_4_1 = (Action)cGroup_4.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cPowerAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cPowerPrimaryExpressionParserRuleCall_4_3_0 = (RuleCall)cPowerAssignment_4_3.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	PrimaryExpression {Plus.left=current} "+" right=Expression | PrimaryExpression {Minus.left=current} "-"
		//	right=Expression | PrimaryExpression {Mult.left=current} "*" right=Expression | PrimaryExpression {Div.left=current}
		//	"/" right=Expression | PrimaryExpression {Pow.base=current} "^" power=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression {Plus.left=current} "+" right=Expression | PrimaryExpression {Minus.left=current} "-" right=Expression
		//| PrimaryExpression {Mult.left=current} "*" right=Expression | PrimaryExpression {Div.left=current} "/"
		//right=Expression | PrimaryExpression {Pow.base=current} "^" power=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression {Plus.left=current} "+" right=Expression
		public Group getGroup_0() { return cGroup_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0_0() { return cPrimaryExpressionParserRuleCall_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_0_1() { return cPlusLeftAction_0_1; }

		//"+"
		public Keyword getPlusSignKeyword_0_2() { return cPlusSignKeyword_0_2; }

		//right=Expression
		public Assignment getRightAssignment_0_3() { return cRightAssignment_0_3; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_0_3_0() { return cRightExpressionParserRuleCall_0_3_0; }

		//PrimaryExpression {Minus.left=current} "-" right=Expression
		public Group getGroup_1() { return cGroup_1; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1_0() { return cPrimaryExpressionParserRuleCall_1_0; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_1() { return cMinusLeftAction_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }

		//right=Expression
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_3_0() { return cRightExpressionParserRuleCall_1_3_0; }

		//PrimaryExpression {Mult.left=current} "*" right=Expression
		public Group getGroup_2() { return cGroup_2; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_2_0() { return cPrimaryExpressionParserRuleCall_2_0; }

		//{Mult.left=current}
		public Action getMultLeftAction_2_1() { return cMultLeftAction_2_1; }

		//"*"
		public Keyword getAsteriskKeyword_2_2() { return cAsteriskKeyword_2_2; }

		//right=Expression
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_2_3_0() { return cRightExpressionParserRuleCall_2_3_0; }

		//PrimaryExpression {Div.left=current} "/" right=Expression
		public Group getGroup_3() { return cGroup_3; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_3_0() { return cPrimaryExpressionParserRuleCall_3_0; }

		//{Div.left=current}
		public Action getDivLeftAction_3_1() { return cDivLeftAction_3_1; }

		//"/"
		public Keyword getSolidusKeyword_3_2() { return cSolidusKeyword_3_2; }

		//right=Expression
		public Assignment getRightAssignment_3_3() { return cRightAssignment_3_3; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_3_0() { return cRightExpressionParserRuleCall_3_3_0; }

		//PrimaryExpression {Pow.base=current} "^" power=PrimaryExpression
		public Group getGroup_4() { return cGroup_4; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_4_0() { return cPrimaryExpressionParserRuleCall_4_0; }

		//{Pow.base=current}
		public Action getPowBaseAction_4_1() { return cPowBaseAction_4_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_4_2() { return cCircumflexAccentKeyword_4_2; }

		//power=PrimaryExpression
		public Assignment getPowerAssignment_4_3() { return cPowerAssignment_4_3; }

		//PrimaryExpression
		public RuleCall getPowerPrimaryExpressionParserRuleCall_4_3_0() { return cPowerPrimaryExpressionParserRuleCall_4_3_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_5() { return cPrimaryExpressionParserRuleCall_5; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNumberAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//PrimaryExpression returns Expression:
		//	"(" Expression ")" | {Variable} name=ID | {Number} value=INT;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {Variable} name=ID | {Number} value=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Variable} name=ID
		public Group getGroup_1() { return cGroup_1; }

		//{Variable}
		public Action getVariableAction_1_0() { return cVariableAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//{Number} value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{Number}
		public Action getNumberAction_2_0() { return cNumberAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
	}
	
	
	private FormulaElements pFormula;
	private ExpressionElements pExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Formula:
	//	expression=Expression;
	public FormulaElements getFormulaAccess() {
		return (pFormula != null) ? pFormula : (pFormula = new FormulaElements());
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}

	//Expression:
	//	PrimaryExpression {Plus.left=current} "+" right=Expression | PrimaryExpression {Minus.left=current} "-"
	//	right=Expression | PrimaryExpression {Mult.left=current} "*" right=Expression | PrimaryExpression {Div.left=current}
	//	"/" right=Expression | PrimaryExpression {Pow.base=current} "^" power=PrimaryExpression | PrimaryExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	"(" Expression ")" | {Variable} name=ID | {Number} value=INT;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
