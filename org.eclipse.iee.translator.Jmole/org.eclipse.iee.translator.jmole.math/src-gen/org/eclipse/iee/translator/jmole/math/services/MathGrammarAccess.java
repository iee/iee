/*
* generated by Xtext
*/

package org.eclipse.iee.translator.jmole.math.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MathGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionDefinitionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDefinitionFunctionDefinitionParserRuleCall_0_0 = (RuleCall)cFunctionDefinitionAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignmentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentVariableAssignmentParserRuleCall_1_0 = (RuleCall)cVariableAssignmentAssignment_1.eContents().get(0);
		private final Assignment cFormulaAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFormulaFormulaParserRuleCall_2_0 = (RuleCall)cFormulaAssignment_2.eContents().get(0);
		private final Assignment cMatrixAssignmentAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMatrixAssignmentMatrixAssignmentParserRuleCall_3_0 = (RuleCall)cMatrixAssignmentAssignment_3.eContents().get(0);
		private final Assignment cMatrixFormulaAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMatrixFormulaMatrixFormulaParserRuleCall_4_0 = (RuleCall)cMatrixFormulaAssignment_4.eContents().get(0);
		
		//Statement:
		//	functionDefinition=FunctionDefinition | variableAssignment=VariableAssignment | formula=Formula |
		//	matrixAssignment=MatrixAssignment | matrixFormula=MatrixFormula;
		public ParserRule getRule() { return rule; }

		//functionDefinition=FunctionDefinition | variableAssignment=VariableAssignment | formula=Formula |
		//matrixAssignment=MatrixAssignment | matrixFormula=MatrixFormula
		public Alternatives getAlternatives() { return cAlternatives; }

		//functionDefinition=FunctionDefinition
		public Assignment getFunctionDefinitionAssignment_0() { return cFunctionDefinitionAssignment_0; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionFunctionDefinitionParserRuleCall_0_0() { return cFunctionDefinitionFunctionDefinitionParserRuleCall_0_0; }

		//variableAssignment=VariableAssignment
		public Assignment getVariableAssignmentAssignment_1() { return cVariableAssignmentAssignment_1; }

		//VariableAssignment
		public RuleCall getVariableAssignmentVariableAssignmentParserRuleCall_1_0() { return cVariableAssignmentVariableAssignmentParserRuleCall_1_0; }

		//formula=Formula
		public Assignment getFormulaAssignment_2() { return cFormulaAssignment_2; }

		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_2_0() { return cFormulaFormulaParserRuleCall_2_0; }

		//matrixAssignment=MatrixAssignment
		public Assignment getMatrixAssignmentAssignment_3() { return cMatrixAssignmentAssignment_3; }

		//MatrixAssignment
		public RuleCall getMatrixAssignmentMatrixAssignmentParserRuleCall_3_0() { return cMatrixAssignmentMatrixAssignmentParserRuleCall_3_0; }

		//matrixFormula=MatrixFormula
		public Assignment getMatrixFormulaAssignment_4() { return cMatrixFormulaAssignment_4; }

		//MatrixFormula
		public RuleCall getMatrixFormulaMatrixFormulaParserRuleCall_4_0() { return cMatrixFormulaMatrixFormulaParserRuleCall_4_0; }
	}

	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableMATH_NAMETerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueFormulaParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//VariableAssignment:
		//	variable=MATH_NAME "=" value=Formula;
		public ParserRule getRule() { return rule; }

		//variable=MATH_NAME "=" value=Formula
		public Group getGroup() { return cGroup; }

		//variable=MATH_NAME
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//MATH_NAME
		public RuleCall getVariableMATH_NAMETerminalRuleCall_0_0() { return cVariableMATH_NAMETerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Formula
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Formula
		public RuleCall getValueFormulaParserRuleCall_2_0() { return cValueFormulaParserRuleCall_2_0; }
	}

	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formula");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionAdditionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Formula:
		//	expression=Addition;
		public ParserRule getRule() { return rule; }

		//expression=Addition
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Addition
		public RuleCall getExpressionAdditionParserRuleCall_0() { return cExpressionAdditionParserRuleCall_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cAdditionLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cSubtractionLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//// addition/subtraction: left associative, priority 0
		//
		//Addition returns Expression:
		//	Multiplication ("+" {Addition.left=current} right=Multiplication | "-" {Subtraction.left=current}
		//	right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ("+" {Addition.left=current} right=Multiplication | "-" {Subtraction.left=current} right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//("+" {Addition.left=current} right=Multiplication | "-" {Subtraction.left=current} right=Multiplication)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"+" {Addition.left=current} right=Multiplication
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0_1() { return cAdditionLeftAction_1_0_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_0_2_0() { return cRightMultiplicationParserRuleCall_1_0_2_0; }

		//"-" {Subtraction.left=current} right=Multiplication
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }

		//{Subtraction.left=current}
		public Action getSubtractionLeftAction_1_1_1() { return cSubtractionLeftAction_1_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_2_0() { return cRightMultiplicationParserRuleCall_1_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cDivisionLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cPercentSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Action cModuloLeftAction_1_2_1 = (Action)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//// multiplication/division, left associative, priority 1
		//
		//Multiplication returns Expression:
		//	UnaryExpression ("*" {Multiplication.left=current} right=UnaryExpression | "/" {Division.left=current}
		//	right=UnaryExpression | "%" {Modulo.left=current} right=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//UnaryExpression ("*" {Multiplication.left=current} right=UnaryExpression | "/" {Division.left=current}
		//right=UnaryExpression | "%" {Modulo.left=current} right=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//("*" {Multiplication.left=current} right=UnaryExpression | "/" {Division.left=current} right=UnaryExpression | "%"
		//{Modulo.left=current} right=UnaryExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"*" {Multiplication.left=current} right=UnaryExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_1() { return cMultiplicationLeftAction_1_0_1; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_0_2_0() { return cRightUnaryExpressionParserRuleCall_1_0_2_0; }

		//"/" {Division.left=current} right=UnaryExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"/"
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_1_1() { return cDivisionLeftAction_1_1_1; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_1_2_0; }

		//"%" {Modulo.left=current} right=UnaryExpression
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"%"
		public Keyword getPercentSignKeyword_1_2_0() { return cPercentSignKeyword_1_2_0; }

		//{Modulo.left=current}
		public Action getModuloLeftAction_1_2_1() { return cModuloLeftAction_1_2_1; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_2_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cInvertAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cFactorialAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisExclamationMarkKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// Unary operators: right associative, priority 2
		//
		//UnaryExpression returns Expression:
		//	Exponent | "(-" {Invert} expression=UnaryExpression ")" | "(" {Factorial} expression=UnaryExpression ")!";
		public ParserRule getRule() { return rule; }

		//Exponent | "(-" {Invert} expression=UnaryExpression ")" | "(" {Factorial} expression=UnaryExpression ")!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Exponent
		public RuleCall getExponentParserRuleCall_0() { return cExponentParserRuleCall_0; }

		//"(-" {Invert} expression=UnaryExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"(-"
		public Keyword getLeftParenthesisHyphenMinusKeyword_1_0() { return cLeftParenthesisHyphenMinusKeyword_1_0; }

		//{Invert}
		public Action getInvertAction_1_1() { return cInvertAction_1_1; }

		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_2_0() { return cExpressionUnaryExpressionParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"(" {Factorial} expression=UnaryExpression ")!"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//{Factorial}
		public Action getFactorialAction_2_1() { return cFactorialAction_2_1; }

		//expression=UnaryExpression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }

		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_2_2_0() { return cExpressionUnaryExpressionParserRuleCall_2_2_0; }

		//")!"
		public Keyword getRightParenthesisExclamationMarkKeyword_2_3() { return cRightParenthesisExclamationMarkKeyword_2_3; }
	}

	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// exponentiation: right associative, priority 3
		//
		//Exponent returns Expression:
		//	Primary ({Exponent.left=current} "^" right=Primary)?;
		public ParserRule getRule() { return rule; }

		//Primary ({Exponent.left=current} "^" right=Primary)?
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Exponent.left=current} "^" right=Primary)?
		public Group getGroup_1() { return cGroup_1; }

		//{Exponent.left=current}
		public Action getExponentLeftAction_1_0() { return cExponentLeftAction_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameMATH_NAMETerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFloatAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFloatParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMatrixElementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementMATH_NAMETerminalRuleCall_2_1_0 = (RuleCall)cElementAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRowAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRowFloatParserRuleCall_2_3_0 = (RuleCall)cRowAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cColumnAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cColumnFloatParserRuleCall_2_6_0 = (RuleCall)cColumnAssignment_2_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFunctionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cFunctionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_3_1_0 = (RuleCall)cFunctionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Primary returns Expression:
		//	{Variable} name=MATH_NAME | {Float} value=Float | {MatrixElement} element=MATH_NAME "[" row=Float "]" "[" column=Float
		//	"]" | {Function} function=Function | "(" Addition ")";
		public ParserRule getRule() { return rule; }

		//{Variable} name=MATH_NAME | {Float} value=Float | {MatrixElement} element=MATH_NAME "[" row=Float "]" "[" column=Float
		//"]" | {Function} function=Function | "(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Variable} name=MATH_NAME
		public Group getGroup_0() { return cGroup_0; }

		//{Variable}
		public Action getVariableAction_0_0() { return cVariableAction_0_0; }

		//name=MATH_NAME
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//MATH_NAME
		public RuleCall getNameMATH_NAMETerminalRuleCall_0_1_0() { return cNameMATH_NAMETerminalRuleCall_0_1_0; }

		//{Float} value=Float
		public Group getGroup_1() { return cGroup_1; }

		//{Float}
		public Action getFloatAction_1_0() { return cFloatAction_1_0; }

		//value=Float
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Float
		public RuleCall getValueFloatParserRuleCall_1_1_0() { return cValueFloatParserRuleCall_1_1_0; }

		//{MatrixElement} element=MATH_NAME "[" row=Float "]" "[" column=Float "]"
		public Group getGroup_2() { return cGroup_2; }

		//{MatrixElement}
		public Action getMatrixElementAction_2_0() { return cMatrixElementAction_2_0; }

		//element=MATH_NAME
		public Assignment getElementAssignment_2_1() { return cElementAssignment_2_1; }

		//MATH_NAME
		public RuleCall getElementMATH_NAMETerminalRuleCall_2_1_0() { return cElementMATH_NAMETerminalRuleCall_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//row=Float
		public Assignment getRowAssignment_2_3() { return cRowAssignment_2_3; }

		//Float
		public RuleCall getRowFloatParserRuleCall_2_3_0() { return cRowFloatParserRuleCall_2_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_5() { return cLeftSquareBracketKeyword_2_5; }

		//column=Float
		public Assignment getColumnAssignment_2_6() { return cColumnAssignment_2_6; }

		//Float
		public RuleCall getColumnFloatParserRuleCall_2_6_0() { return cColumnFloatParserRuleCall_2_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_7() { return cRightSquareBracketKeyword_2_7; }

		//{Function} function=Function
		public Group getGroup_3() { return cGroup_3; }

		//{Function}
		public Action getFunctionAction_3_0() { return cFunctionAction_3_0; }

		//function=Function
		public Assignment getFunctionAssignment_3_1() { return cFunctionAssignment_3_1; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_3_1_0() { return cFunctionFunctionParserRuleCall_3_1_0; }

		//"(" Addition ")"
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_4_1() { return cAdditionParserRuleCall_4_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class MatrixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matrix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRowsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRowsMatrixRowParserRuleCall_1_0_0 = (RuleCall)cRowsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRowsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRowsMatrixRowParserRuleCall_1_1_1_0 = (RuleCall)cRowsAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Matrix:
		//	"{" (rows+=MatrixRow ("," rows+=MatrixRow)* ","?)? "}";
		public ParserRule getRule() { return rule; }

		//"{" (rows+=MatrixRow ("," rows+=MatrixRow)* ","?)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//(rows+=MatrixRow ("," rows+=MatrixRow)* ","?)?
		public Group getGroup_1() { return cGroup_1; }

		//rows+=MatrixRow
		public Assignment getRowsAssignment_1_0() { return cRowsAssignment_1_0; }

		//MatrixRow
		public RuleCall getRowsMatrixRowParserRuleCall_1_0_0() { return cRowsMatrixRowParserRuleCall_1_0_0; }

		//("," rows+=MatrixRow)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//rows+=MatrixRow
		public Assignment getRowsAssignment_1_1_1() { return cRowsAssignment_1_1_1; }

		//MatrixRow
		public RuleCall getRowsMatrixRowParserRuleCall_1_1_1_0() { return cRowsMatrixRowParserRuleCall_1_1_1_0; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class MatrixRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsFloatParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementsFloatParserRuleCall_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MatrixRow:
		//	"{" (elements+=Float ("," elements+=Float)* ","?)? "}";
		public ParserRule getRule() { return rule; }

		//"{" (elements+=Float ("," elements+=Float)* ","?)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//(elements+=Float ("," elements+=Float)* ","?)?
		public Group getGroup_1() { return cGroup_1; }

		//elements+=Float
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//Float
		public RuleCall getElementsFloatParserRuleCall_1_0_0() { return cElementsFloatParserRuleCall_1_0_0; }

		//("," elements+=Float)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//elements+=Float
		public Assignment getElementsAssignment_1_1_1() { return cElementsAssignment_1_1_1; }

		//Float
		public RuleCall getElementsFloatParserRuleCall_1_1_1_0() { return cElementsFloatParserRuleCall_1_1_1_0; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class MatrixAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableMATH_NAMETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueMatrixFormulaParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//MatrixAssignment:
		//	"[" variable=MATH_NAME "]" "=" value=MatrixFormula;
		public ParserRule getRule() { return rule; }

		//"[" variable=MATH_NAME "]" "=" value=MatrixFormula
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//variable=MATH_NAME
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//MATH_NAME
		public RuleCall getVariableMATH_NAMETerminalRuleCall_1_0() { return cVariableMATH_NAMETerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=MatrixFormula
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//MatrixFormula
		public RuleCall getValueMatrixFormulaParserRuleCall_4_0() { return cValueMatrixFormulaParserRuleCall_4_0; }
	}

	public class MatrixFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixFormula");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionMatrixAdditionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//MatrixFormula:
		//	expression=MatrixAddition;
		public ParserRule getRule() { return rule; }

		//expression=MatrixAddition
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//MatrixAddition
		public RuleCall getExpressionMatrixAdditionParserRuleCall_0() { return cExpressionMatrixAdditionParserRuleCall_0; }
	}

	public class MatrixAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixAddition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMatrixMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cMatrixAdditionLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMatrixMultiplicationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cMatrixSubtractionLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightMatrixMultiplicationParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//MatrixAddition returns MatrixExpression:
		//	MatrixMultiplication ("+" {MatrixAddition.left=current} right=MatrixMultiplication | "-"
		//	{MatrixSubtraction.left=current} right=MatrixMultiplication)*;
		public ParserRule getRule() { return rule; }

		//MatrixMultiplication ("+" {MatrixAddition.left=current} right=MatrixMultiplication | "-"
		//{MatrixSubtraction.left=current} right=MatrixMultiplication)*
		public Group getGroup() { return cGroup; }

		//MatrixMultiplication
		public RuleCall getMatrixMultiplicationParserRuleCall_0() { return cMatrixMultiplicationParserRuleCall_0; }

		//("+" {MatrixAddition.left=current} right=MatrixMultiplication | "-" {MatrixSubtraction.left=current}
		//right=MatrixMultiplication)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"+" {MatrixAddition.left=current} right=MatrixMultiplication
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//{MatrixAddition.left=current}
		public Action getMatrixAdditionLeftAction_1_0_1() { return cMatrixAdditionLeftAction_1_0_1; }

		//right=MatrixMultiplication
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//MatrixMultiplication
		public RuleCall getRightMatrixMultiplicationParserRuleCall_1_0_2_0() { return cRightMatrixMultiplicationParserRuleCall_1_0_2_0; }

		//"-" {MatrixSubtraction.left=current} right=MatrixMultiplication
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }

		//{MatrixSubtraction.left=current}
		public Action getMatrixSubtractionLeftAction_1_1_1() { return cMatrixSubtractionLeftAction_1_1_1; }

		//right=MatrixMultiplication
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//MatrixMultiplication
		public RuleCall getRightMatrixMultiplicationParserRuleCall_1_1_2_0() { return cRightMatrixMultiplicationParserRuleCall_1_1_2_0; }
	}

	public class MatrixMultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatrixMultiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryMatrixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cMatrixMultiplicationLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightMatrixAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMatrixPrimaryMatrixParserRuleCall_1_0_2_0 = (RuleCall)cRightMatrixAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cMatrixMultiplicationLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightScalarAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightScalarFormulaParserRuleCall_1_1_2_0 = (RuleCall)cRightScalarAssignment_1_1_2.eContents().get(0);
		
		//MatrixMultiplication returns MatrixExpression:
		//	PrimaryMatrix ("*" {MatrixMultiplication.left=current} rightMatrix=PrimaryMatrix | "*"
		//	{MatrixMultiplication.left=current} rightScalar=Formula)*;
		public ParserRule getRule() { return rule; }

		//PrimaryMatrix ("*" {MatrixMultiplication.left=current} rightMatrix=PrimaryMatrix | "*"
		//{MatrixMultiplication.left=current} rightScalar=Formula)*
		public Group getGroup() { return cGroup; }

		//PrimaryMatrix
		public RuleCall getPrimaryMatrixParserRuleCall_0() { return cPrimaryMatrixParserRuleCall_0; }

		//("*" {MatrixMultiplication.left=current} rightMatrix=PrimaryMatrix | "*" {MatrixMultiplication.left=current}
		//rightScalar=Formula)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"*" {MatrixMultiplication.left=current} rightMatrix=PrimaryMatrix
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//{MatrixMultiplication.left=current}
		public Action getMatrixMultiplicationLeftAction_1_0_1() { return cMatrixMultiplicationLeftAction_1_0_1; }

		//rightMatrix=PrimaryMatrix
		public Assignment getRightMatrixAssignment_1_0_2() { return cRightMatrixAssignment_1_0_2; }

		//PrimaryMatrix
		public RuleCall getRightMatrixPrimaryMatrixParserRuleCall_1_0_2_0() { return cRightMatrixPrimaryMatrixParserRuleCall_1_0_2_0; }

		//"*" {MatrixMultiplication.left=current} rightScalar=Formula
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }

		//{MatrixMultiplication.left=current}
		public Action getMatrixMultiplicationLeftAction_1_1_1() { return cMatrixMultiplicationLeftAction_1_1_1; }

		//rightScalar=Formula
		public Assignment getRightScalarAssignment_1_1_2() { return cRightScalarAssignment_1_1_2; }

		//Formula
		public RuleCall getRightScalarFormulaParserRuleCall_1_1_2_0() { return cRightScalarFormulaParserRuleCall_1_1_2_0; }
	}

	public class PrimaryMatrixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryMatrix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNewMatrixAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cMatrixAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMatrixMatrixParserRuleCall_0_1_0 = (RuleCall)cMatrixAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTransposeMatrixAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameMATH_NAMETerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cTKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMatrixVariableAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameMATH_NAMETerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cMatrixAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PrimaryMatrix returns MatrixExpression:
		//	{NewMatrix} matrix=Matrix | {TransposeMatrix} "[" name=MATH_NAME "]^T" | {MatrixVariable} "[" name=MATH_NAME "]" | "("
		//	MatrixAddition ")";
		public ParserRule getRule() { return rule; }

		//{NewMatrix} matrix=Matrix | {TransposeMatrix} "[" name=MATH_NAME "]^T" | {MatrixVariable} "[" name=MATH_NAME "]" | "("
		//MatrixAddition ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NewMatrix} matrix=Matrix
		public Group getGroup_0() { return cGroup_0; }

		//{NewMatrix}
		public Action getNewMatrixAction_0_0() { return cNewMatrixAction_0_0; }

		//matrix=Matrix
		public Assignment getMatrixAssignment_0_1() { return cMatrixAssignment_0_1; }

		//Matrix
		public RuleCall getMatrixMatrixParserRuleCall_0_1_0() { return cMatrixMatrixParserRuleCall_0_1_0; }

		//{TransposeMatrix} "[" name=MATH_NAME "]^T"
		public Group getGroup_1() { return cGroup_1; }

		//{TransposeMatrix}
		public Action getTransposeMatrixAction_1_0() { return cTransposeMatrixAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//name=MATH_NAME
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//MATH_NAME
		public RuleCall getNameMATH_NAMETerminalRuleCall_1_2_0() { return cNameMATH_NAMETerminalRuleCall_1_2_0; }

		//"]^T"
		public Keyword getTKeyword_1_3() { return cTKeyword_1_3; }

		//{MatrixVariable} "[" name=MATH_NAME "]"
		public Group getGroup_2() { return cGroup_2; }

		//{MatrixVariable}
		public Action getMatrixVariableAction_2_0() { return cMatrixVariableAction_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }

		//name=MATH_NAME
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//MATH_NAME
		public RuleCall getNameMATH_NAMETerminalRuleCall_2_2_0() { return cNameMATH_NAMETerminalRuleCall_2_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//"(" MatrixAddition ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//MatrixAddition
		public RuleCall getMatrixAdditionParserRuleCall_3_1() { return cMatrixAdditionParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cEKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cEKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		
		//Float:
		//	INT+ ("." INT+ (("E" | "e") "-"? INT+)?)?;
		public ParserRule getRule() { return rule; }

		//INT+ ("." INT+ (("E" | "e") "-"? INT+)?)?
		public Group getGroup() { return cGroup; }

		//INT+
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT+ (("E" | "e") "-"? INT+)?)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT+
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//(("E" | "e") "-"? INT+)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"E" | "e"
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }

		//"E"
		public Keyword getEKeyword_1_2_0_0() { return cEKeyword_1_2_0_0; }

		//"e"
		public Keyword getEKeyword_1_2_0_1() { return cEKeyword_1_2_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_1_2_1() { return cHyphenMinusKeyword_1_2_1; }

		//INT+
		public RuleCall getINTTerminalRuleCall_1_2_2() { return cINTTerminalRuleCall_1_2_2; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameMATH_NAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersFormulaParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersFormulaParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Function returns Expression:
		//	name=MATH_NAME "(" (parameters+=Formula ("," parameters+=Formula)* ","?)? ")";
		public ParserRule getRule() { return rule; }

		//name=MATH_NAME "(" (parameters+=Formula ("," parameters+=Formula)* ","?)? ")"
		public Group getGroup() { return cGroup; }

		//name=MATH_NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//MATH_NAME
		public RuleCall getNameMATH_NAMETerminalRuleCall_0_0() { return cNameMATH_NAMETerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=Formula ("," parameters+=Formula)* ","?)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=Formula
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//Formula
		public RuleCall getParametersFormulaParserRuleCall_2_0_0() { return cParametersFormulaParserRuleCall_2_0_0; }

		//("," parameters+=Formula)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=Formula
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//Formula
		public RuleCall getParametersFormulaParserRuleCall_2_1_1_0() { return cParametersFormulaParserRuleCall_2_1_1_0; }

		//","?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormulaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormulaFormulaParserRuleCall_2_0 = (RuleCall)cFormulaAssignment_2.eContents().get(0);
		
		//FunctionDefinition:
		//	function=Function "=" formula=Formula;
		public ParserRule getRule() { return rule; }

		//function=Function "=" formula=Formula
		public Group getGroup() { return cGroup; }

		//function=Function
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0() { return cFunctionFunctionParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//formula=Formula
		public Assignment getFormulaAssignment_2() { return cFormulaAssignment_2; }

		//Formula
		public RuleCall getFormulaFormulaParserRuleCall_2_0() { return cFormulaFormulaParserRuleCall_2_0; }
	}
	
	
	private StatementElements pStatement;
	private VariableAssignmentElements pVariableAssignment;
	private FormulaElements pFormula;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private UnaryExpressionElements pUnaryExpression;
	private ExponentElements pExponent;
	private PrimaryElements pPrimary;
	private MatrixElements pMatrix;
	private MatrixRowElements pMatrixRow;
	private MatrixAssignmentElements pMatrixAssignment;
	private MatrixFormulaElements pMatrixFormula;
	private MatrixAdditionElements pMatrixAddition;
	private MatrixMultiplicationElements pMatrixMultiplication;
	private PrimaryMatrixElements pPrimaryMatrix;
	private FloatElements pFloat;
	private FunctionElements pFunction;
	private FunctionDefinitionElements pFunctionDefinition;
	private TerminalRule tMATH_NAME;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Statement:
	//	functionDefinition=FunctionDefinition | variableAssignment=VariableAssignment | formula=Formula |
	//	matrixAssignment=MatrixAssignment | matrixFormula=MatrixFormula;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VariableAssignment:
	//	variable=MATH_NAME "=" value=Formula;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return (pVariableAssignment != null) ? pVariableAssignment : (pVariableAssignment = new VariableAssignmentElements());
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}

	//Formula:
	//	expression=Addition;
	public FormulaElements getFormulaAccess() {
		return (pFormula != null) ? pFormula : (pFormula = new FormulaElements());
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}

	//// addition/subtraction: left associative, priority 0
	//
	//Addition returns Expression:
	//	Multiplication ("+" {Addition.left=current} right=Multiplication | "-" {Subtraction.left=current}
	//	right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//// multiplication/division, left associative, priority 1
	//
	//Multiplication returns Expression:
	//	UnaryExpression ("*" {Multiplication.left=current} right=UnaryExpression | "/" {Division.left=current}
	//	right=UnaryExpression | "%" {Modulo.left=current} right=UnaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//// Unary operators: right associative, priority 2
	//
	//UnaryExpression returns Expression:
	//	Exponent | "(-" {Invert} expression=UnaryExpression ")" | "(" {Factorial} expression=UnaryExpression ")!";
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//// exponentiation: right associative, priority 3
	//
	//Exponent returns Expression:
	//	Primary ({Exponent.left=current} "^" right=Primary)?;
	public ExponentElements getExponentAccess() {
		return (pExponent != null) ? pExponent : (pExponent = new ExponentElements());
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}

	//Primary returns Expression:
	//	{Variable} name=MATH_NAME | {Float} value=Float | {MatrixElement} element=MATH_NAME "[" row=Float "]" "[" column=Float
	//	"]" | {Function} function=Function | "(" Addition ")";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Matrix:
	//	"{" (rows+=MatrixRow ("," rows+=MatrixRow)* ","?)? "}";
	public MatrixElements getMatrixAccess() {
		return (pMatrix != null) ? pMatrix : (pMatrix = new MatrixElements());
	}
	
	public ParserRule getMatrixRule() {
		return getMatrixAccess().getRule();
	}

	//MatrixRow:
	//	"{" (elements+=Float ("," elements+=Float)* ","?)? "}";
	public MatrixRowElements getMatrixRowAccess() {
		return (pMatrixRow != null) ? pMatrixRow : (pMatrixRow = new MatrixRowElements());
	}
	
	public ParserRule getMatrixRowRule() {
		return getMatrixRowAccess().getRule();
	}

	//MatrixAssignment:
	//	"[" variable=MATH_NAME "]" "=" value=MatrixFormula;
	public MatrixAssignmentElements getMatrixAssignmentAccess() {
		return (pMatrixAssignment != null) ? pMatrixAssignment : (pMatrixAssignment = new MatrixAssignmentElements());
	}
	
	public ParserRule getMatrixAssignmentRule() {
		return getMatrixAssignmentAccess().getRule();
	}

	//MatrixFormula:
	//	expression=MatrixAddition;
	public MatrixFormulaElements getMatrixFormulaAccess() {
		return (pMatrixFormula != null) ? pMatrixFormula : (pMatrixFormula = new MatrixFormulaElements());
	}
	
	public ParserRule getMatrixFormulaRule() {
		return getMatrixFormulaAccess().getRule();
	}

	//MatrixAddition returns MatrixExpression:
	//	MatrixMultiplication ("+" {MatrixAddition.left=current} right=MatrixMultiplication | "-"
	//	{MatrixSubtraction.left=current} right=MatrixMultiplication)*;
	public MatrixAdditionElements getMatrixAdditionAccess() {
		return (pMatrixAddition != null) ? pMatrixAddition : (pMatrixAddition = new MatrixAdditionElements());
	}
	
	public ParserRule getMatrixAdditionRule() {
		return getMatrixAdditionAccess().getRule();
	}

	//MatrixMultiplication returns MatrixExpression:
	//	PrimaryMatrix ("*" {MatrixMultiplication.left=current} rightMatrix=PrimaryMatrix | "*"
	//	{MatrixMultiplication.left=current} rightScalar=Formula)*;
	public MatrixMultiplicationElements getMatrixMultiplicationAccess() {
		return (pMatrixMultiplication != null) ? pMatrixMultiplication : (pMatrixMultiplication = new MatrixMultiplicationElements());
	}
	
	public ParserRule getMatrixMultiplicationRule() {
		return getMatrixMultiplicationAccess().getRule();
	}

	//PrimaryMatrix returns MatrixExpression:
	//	{NewMatrix} matrix=Matrix | {TransposeMatrix} "[" name=MATH_NAME "]^T" | {MatrixVariable} "[" name=MATH_NAME "]" | "("
	//	MatrixAddition ")";
	public PrimaryMatrixElements getPrimaryMatrixAccess() {
		return (pPrimaryMatrix != null) ? pPrimaryMatrix : (pPrimaryMatrix = new PrimaryMatrixElements());
	}
	
	public ParserRule getPrimaryMatrixRule() {
		return getPrimaryMatrixAccess().getRule();
	}

	//Float:
	//	INT+ ("." INT+ (("E" | "e") "-"? INT+)?)?;
	public FloatElements getFloatAccess() {
		return (pFloat != null) ? pFloat : (pFloat = new FloatElements());
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	//Function returns Expression:
	//	name=MATH_NAME "(" (parameters+=Formula ("," parameters+=Formula)* ","?)? ")";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//FunctionDefinition:
	//	function=Function "=" formula=Formula;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//terminal MATH_NAME:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getMATH_NAMERule() {
		return (tMATH_NAME != null) ? tMATH_NAME : (tMATH_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MATH_NAME"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
