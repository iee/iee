grammar org.eclipse.iee.translator.molex.mex.Mex with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate mex "http://www.eclipse.org/iee/translator/molex/mex/Mex"

Statement:
	functionDefinition=FunctionDefinition |
	variableAssignment=VariableAssignment |
	formula=Formula |
	logicalFormula = LogicalFormula |
	matrixAssignment=MatrixAssignment |
	matrixFormula=MatrixFormula;

VariableAssignment:
	variable=Formula '=' value=Formula;

Formula:
	expression=(Addition);
	
LogicalFormula:
	expression=(LogicalAddition)	
;

AdditionInBrackets returns Expression:
	'(' addition=Addition ')'
;

	// addition/subtraction: left associative, priority 0
Addition returns Expression:
	Multiplication ('+' {Addition.left=current} right=Multiplication | '-' {Subtraction.left=current}
	right=Multiplication)*;

	// multiplication/division, left associative, priority 1
Multiplication returns Expression:
	UnaryExpression ('*' {Multiplication.left=current} right=UnaryExpression | '/' {Division.left=current}
	right=UnaryExpression | '%' {Modulo.left=current} right=UnaryExpression)*;

	// Unary operators: right associative, priority 2
UnaryExpression returns Expression:
	Exponent |
	'(-' {Invert} expression=UnaryExpression')' |
	'(' {Factorial} expression=UnaryExpression ')!';
	
	// exponentiation: right associative, priority 3
Exponent returns Expression:
	Primary ({Exponent.left=current} '^' right=Primary)?;

Primary returns Expression:
	{Variable} name=MathName |
	{Float} value=Float |
	{Function} function=Function |
	{MatrixElement} element=MathName '[' row=Formula ']' '[' column=Formula ']' | 
	{InBrackets} inBrackets=AdditionInBrackets |
	{ClassFunction} class_=MathName '.' function=Function |
	{ClassMember} class_=MathName '.' member=MathName ;

Matrix:
	'{' (rows+=MatrixRow (',' rows+=MatrixRow)* ','?)? '}';
	
MatrixRow:
	'{' (elements+=Formula (',' elements+=Formula)* ','?)? '}';

MatrixAssignment:
	'[' variable=MathName ']' '=' value=MatrixFormula;

MatrixFormula:
	expression=MatrixAddition;

MatrixAdditionInBrackets returns MatrixExpression:
	'(' addition=MatrixAddition ')'
;

MatrixAddition returns MatrixExpression:
	MatrixMultiplication ('+' {MatrixAddition.left=current} right=MatrixMultiplication | '-' {MatrixSubtraction.left=current}
	right=MatrixMultiplication)*;
	
MatrixMultiplication returns MatrixExpression:
	PrimaryMatrix ('*' {MatrixMultiplication.left=current} rightMatrix=PrimaryMatrix |
				   '*' {MatrixMultiplication.left=current} rightScalar=Formula
	)*;
	
PrimaryMatrix returns MatrixExpression:
	{NewMatrix} matrix=Matrix |
	{TransposeMatrix} '[' name=MathName ']^T'|
	{MatrixVariable} '[' name=MathName ']' |
	'(' MatrixAddition ')' |
	{MatrixInBrackets} inBrackets=MatrixAdditionInBrackets;

Float:
	(INT)+ EXP?
	| (INT)+ '.' (INT)* EXP?;

Function returns Expression:
	name=MathName '(' (parameters+=Formula (',' parameters+=Formula)* ','?)? ')';

FunctionDefinition:
	function=Function '=' formula=Formula;
	
MathName: 
	mathName = MATH_NAME
;

LogicalAdditionInBrackets returns LogicalExpression:
	'(' addition=LogicalAddition ')'
;

	// addition: left associative, priority 0
LogicalAddition returns LogicalExpression:
	LogicalMultiplication ('||' {LogicalAddition.left=current} right=LogicalMultiplication)*;

	// multiplication, left associative, priority 1
LogicalMultiplication returns LogicalExpression:
	LogicalComparison ('&&' {LogicalMultiplication.left=current} right=LogicalComparison)*;

LogicalComparison returns LogicalExpression:
	 LogicalPrimary ( operation=COMPARISON_OPERATION {LogicalComparison.left=current} right=LogicalPrimary )*;

LogicalPrimary returns LogicalExpression:
	{LogicalOperand} value=Formula |
	{LogicalInBrackets} inBrackets=LogicalAdditionInBrackets
;	
	
terminal COMPARISON_OPERATION returns ecore::EString:
	'<=' | '>=' | '<' | '>' | '==' | '!='
;

terminal EXP returns ecore::EString:
	('e'|'E') ('+'|'-')? (INT)+
;	
	
terminal MATH_NAME returns ecore::EString:
	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '{' | '}')*;